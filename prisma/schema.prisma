generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  clients       Client[]
  invoices      Invoice[]
  employees     Employee[]
  salarySlips   SalarySlip[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id        Int       @id @default(autoincrement())
  userId    String
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]

  @@index([userId])
}

model Invoice {
  id                 Int           @id @default(autoincrement())
  userId             String
  clientId           Int
  invoiceNo          String
  status             String
  total              Float
  date               DateTime
  dueDate            DateTime?
  notes              String?
  ourName            String
  ourBusinessName    String
  ourAddress         String
  ourEmail           String?
  clientName         String
  clientBusinessName String?
  clientAddress      String
  clientEmail        String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  client             Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  items              InvoiceItem[]

  @@index([userId])
  @@index([clientId])
}

model InvoiceItem {
  id          Int     @id @default(autoincrement())
  invoiceId   Int
  description String
  quantity    Int
  price       Float
  total       Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model Employee {
  id          Int          @id @default(autoincrement())
  userId      String
  name        String
  nationalId  String
  position    String
  status      String       // FULL_TIME, PROBATION, CONTRACT
  address     String
  phone       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  salarySlips SalarySlip[]

  @@index([userId])
}

model SalarySlip {
  id                Int       @id @default(autoincrement())
  userId            String
  employeeId        Int
  month             String
  year              Int
  companyName       String
  companyAddress    String
  companyLogo       String?
  basicSalary       Float
  positionAllowance Float
  familyAllowance   Float
  childAllowance    Float
  foodAllowance     Float
  bonus             Float
  thr               Float
  others            Float
  totalSalary       Float
  approvedBy        String
  approvedPosition  String
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee          Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([employeeId])
}

