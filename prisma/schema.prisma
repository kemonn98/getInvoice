generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  invoices      Invoice[]
  clients       Client[]
}

model Client {
  id          String    @id @default(cuid())
  userId      String
  name        String
  email       String?
  phone       String?
  address     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  invoices    Invoice[]
}

model Invoice {
  id                String        @id @default(cuid())
  userId           String
  clientId         String
  invoiceNumber    String
  status           InvoiceStatus
  amount           Float
  issueDate        DateTime
  dueDate          DateTime
  notes            String?
  ourName          String
  ourBusinessName  String
  ourAddress       String
  clientName       String
  clientBusinessName String?
  clientAddress    String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  user             User          @relation(fields: [userId], references: [id])
  client           Client        @relation(fields: [clientId], references: [id])
  items            InvoiceItem[]
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

