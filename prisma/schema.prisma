generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Account_ibfk_1")

  @@unique([provider, providerAccountId], map: "provider_providerAccountId")
  @@index([userId], map: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique(map: "sessionToken")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Session_ibfk_1")

  @@index([userId], map: "userId")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique(map: "email")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  clients       Client[]
  employees     Employee[]
  invoices      Invoice[]
  salarySlips   SalarySlip[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "token")
  expires    DateTime

  @@unique([identifier, token], map: "identifier_token")
}

model Client {
  id        Int       @id @default(autoincrement())
  userId    String
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Client_ibfk_1")
  invoices  Invoice[]

  @@index([userId], map: "userId")
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model Invoice {
  id                 Int           @id @default(autoincrement())
  userId             String
  clientId           Int
  invoiceNo          String
  status             InvoiceStatus @default(PENDING)
  total              Float         @db.Float
  date               DateTime
  dueDate            DateTime?
  notes              String?       @db.Text
  ourName            String
  ourBusinessName    String
  ourAddress         String
  ourEmail           String?
  clientName         String
  clientBusinessName String?
  clientAddress      String
  clientEmail        String?
  createdAt          DateTime?     @default(now())
  updatedAt          DateTime?     @updatedAt
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Invoice_ibfk_1")
  client             Client        @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Invoice_ibfk_2")
  items              InvoiceItem[]

  @@index([clientId], map: "clientId")
  @@index([userId], map: "userId")
}

model InvoiceItem {
  id          Int     @id @default(autoincrement())
  invoiceId   Int
  description String
  quantity    Int
  price       Float   @db.Float
  total       Float   @db.Float
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "InvoiceItem_ibfk_1")

  @@index([invoiceId], map: "invoiceId")
}

model Employee {
  id          Int          @id @default(autoincrement())
  userId      String
  name        String
  nationalId  String
  position    String
  status      String
  address     String
  phone       String
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "Employee_ibfk_1")
  salarySlips SalarySlip[]

  @@index([userId], map: "userId")
}

model SalarySlip {
  id                Int       @id @default(autoincrement())
  userId            String
  employeeId        Int
  month             String
  year              Int
  companyName       String
  companyAddress    String
  companyLogo       String?
  basicSalary       Float     @db.Float
  positionAllowance Float     @db.Float
  familyAllowance   Float     @db.Float
  childAllowance    Float     @db.Float
  foodAllowance     Float     @db.Float
  bonus             Float     @db.Float
  thr               Float     @db.Float
  others            Float     @db.Float
  totalSalary       Float     @db.Float
  approvedBy        String
  approvedPosition  String
  notes             String?   @db.Text
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "SalarySlip_ibfk_1")
  employee          Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "SalarySlip_ibfk_2")

  @@index([employeeId], map: "employeeId")
  @@index([userId], map: "userId")
}
