// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Add relations to your existing models
  invoices      Invoice[]
  clients       Client[]
}

// Your existing models with updated relations
model Invoice {
  id                Int           @id @default(autoincrement())
  invoiceNo         String        @unique
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  clientId          Int
  client            Client        @relation(fields: [clientId], references: [id])
  status            InvoiceStatus @default(PENDING)
  total             Float         @default(0)
  date              DateTime
  dueDate           DateTime?
  notes             String?       @db.Text
  ourName           String
  ourBusinessName   String
  ourAddress        String
  clientName        String
  clientBusinessName String?
  clientAddress     String
  items             InvoiceItem[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Client {
  id        Int       @id @default(autoincrement())
  userId    String    // Add this field
  user      User      @relation(fields: [userId], references: [id])
  name      String
  email     String?
  phone     String?
  address   String?
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model InvoiceItem {
  id          Int      @id @default(autoincrement())
  invoiceId   Int
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  description String
  quantity    Int
  price       Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Add this enum definition
enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
